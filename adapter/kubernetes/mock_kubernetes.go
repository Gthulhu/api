// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kubernetes

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
	"k8s.io/client-go/kubernetes"
)

// NewMockK8sAdapter creates a new instance of MockK8sAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockK8sAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK8sAdapter {
	mock := &MockK8sAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockK8sAdapter is an autogenerated mock type for the K8sAdapter type
type MockK8sAdapter struct {
	mock.Mock
}

type MockK8sAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK8sAdapter) EXPECT() *MockK8sAdapter_Expecter {
	return &MockK8sAdapter_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function for the type MockK8sAdapter
func (_mock *MockK8sAdapter) GetClient() *kubernetes.Clientset {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *kubernetes.Clientset
	if returnFunc, ok := ret.Get(0).(func() *kubernetes.Clientset); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Clientset)
		}
	}
	return r0
}

// MockK8sAdapter_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockK8sAdapter_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockK8sAdapter_Expecter) GetClient() *MockK8sAdapter_GetClient_Call {
	return &MockK8sAdapter_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *MockK8sAdapter_GetClient_Call) Run(run func()) *MockK8sAdapter_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockK8sAdapter_GetClient_Call) Return(clientset *kubernetes.Clientset) *MockK8sAdapter_GetClient_Call {
	_c.Call.Return(clientset)
	return _c
}

func (_c *MockK8sAdapter_GetClient_Call) RunAndReturn(run func() *kubernetes.Clientset) *MockK8sAdapter_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodByPodUID provides a mock function for the type MockK8sAdapter
func (_mock *MockK8sAdapter) GetPodByPodUID(ctx context.Context, podUID string) (v1.Pod, error) {
	ret := _mock.Called(ctx, podUID)

	if len(ret) == 0 {
		panic("no return value specified for GetPodByPodUID")
	}

	var r0 v1.Pod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (v1.Pod, error)); ok {
		return returnFunc(ctx, podUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) v1.Pod); ok {
		r0 = returnFunc(ctx, podUID)
	} else {
		r0 = ret.Get(0).(v1.Pod)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, podUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockK8sAdapter_GetPodByPodUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodByPodUID'
type MockK8sAdapter_GetPodByPodUID_Call struct {
	*mock.Call
}

// GetPodByPodUID is a helper method to define mock.On call
//   - ctx context.Context
//   - podUID string
func (_e *MockK8sAdapter_Expecter) GetPodByPodUID(ctx interface{}, podUID interface{}) *MockK8sAdapter_GetPodByPodUID_Call {
	return &MockK8sAdapter_GetPodByPodUID_Call{Call: _e.mock.On("GetPodByPodUID", ctx, podUID)}
}

func (_c *MockK8sAdapter_GetPodByPodUID_Call) Run(run func(ctx context.Context, podUID string)) *MockK8sAdapter_GetPodByPodUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockK8sAdapter_GetPodByPodUID_Call) Return(pod v1.Pod, err error) *MockK8sAdapter_GetPodByPodUID_Call {
	_c.Call.Return(pod, err)
	return _c
}

func (_c *MockK8sAdapter_GetPodByPodUID_Call) RunAndReturn(run func(ctx context.Context, podUID string) (v1.Pod, error)) *MockK8sAdapter_GetPodByPodUID_Call {
	_c.Call.Return(run)
	return _c
}
